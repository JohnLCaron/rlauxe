package org.cryptobiotic.rlauxe.workflow

import org.cryptobiotic.rlauxe.core.ClcaAssorterIF
import org.cryptobiotic.rlauxe.core.Cvr
import org.cryptobiotic.rlauxe.core.ErrorRates
import org.cryptobiotic.rlauxe.core.PrevSamplesWithRates

// theory is that the errorRates are proportional to fuzzPct
// Then p1 = fuzzPct * r1, p2 = fuzzPct * r2, p3 = fuzzPct * r3, p4 = fuzzPct * r4.
// margin doesnt matter (TODO show this)

object ClcaErrorRates {
    val rrates = mutableMapOf<Int, List<Double>>() // errorRates / FuzzPct
    val standard = ErrorRates(.01, 1.0e-4, 0.01, 1.0e-4)

    fun getErrorRates(ncandidates: Int, fuzzPct: Double?): ErrorRates {
        if (fuzzPct == null) return standard

        val useCand = when  {
            ncandidates < 2 -> 2
            ncandidates > 10 -> 10
            else -> ncandidates
        }
        val rr = rrates[useCand]!!.map { it * fuzzPct }
        return ErrorRates(rr[0], rr[1], rr[2], rr[3])
    }

    fun calcErrorRates(contestId: Int, cassorter: ClcaAssorterIF,
                       cvrPairs: List<Pair<Cvr, Cvr>>, // (mvr, cvr)
    ) : ErrorRates {
        require(cvrPairs.size > 0)
        val samples = PrevSamplesWithRates(cassorter.noerror()) // accumulate error counts here
        cvrPairs.filter { it.first.hasContest(contestId) }.forEach { samples.addSample(cassorter.bassort(it.first, it.second)) }
        // require( samples.errorCounts().sum() ==  cvrPairs.size)
        return samples.errorRates()
    }

    init {
        // GenerateComparisonErrorTable.generateErrorTable()
        // N=100000 ntrials = 200
        // generated 1/26/2026
        rrates[2] = listOf(0.2623686, 0.2625469, 0.2371862, 0.2370315,)
        rrates[3] = listOf(0.1400744, 0.3492912, 0.3168304, 0.1245060,)
        rrates[4] = listOf(0.1277999, 0.3913025, 0.3519773, 0.1157800,)
        rrates[5] = listOf(0.0692904, 0.3496153, 0.3077332, 0.0600383,)
        rrates[6] = listOf(0.0553841, 0.3398728, 0.2993941, 0.0473467,)
        rrates[7] = listOf(0.0334778, 0.2815991, 0.2397504, 0.0259392,)
        rrates[8] = listOf(0.0351272, 0.3031122, 0.2591883, 0.0280541,)
        rrates[9] = listOf(0.0308620, 0.3042787, 0.2585768, 0.0254916,)
        rrates[10] = listOf(0.0276966, 0.2946918, 0.2517076, 0.0225628,)
    }

}

// N=100000 ntrials = 200
//| ncand | p2o    | p1o    | p1u    | p2u    |
//|-------|--------|--------|--------|--------|
//| 2 |  0.2624 | 0.2625 | 0.2372 | 0.2370 |
//| 3 |  0.1401 | 0.3493 | 0.3168 | 0.1245 |
//| 4 |  0.1278 | 0.3913 | 0.3520 | 0.1158 |
//| 5 |  0.0693 | 0.3496 | 0.3077 | 0.0600 |
//| 6 |  0.0554 | 0.3399 | 0.2994 | 0.0473 |
//| 7 |  0.0335 | 0.2816 | 0.2398 | 0.0259 |
//| 8 |  0.0351 | 0.3031 | 0.2592 | 0.0281 |
//| 9 |  0.0309 | 0.3043 | 0.2586 | 0.0255 |
//| 10 |  0.0277 | 0.2947 | 0.2517 | 0.0226 |

/* undervote dependence??
underVotePct=0.01 N=100000 ntrials = 100
| ncand | r2o    | r1o    | r1u    | r2u    |
|-------|--------|--------|--------|--------|
| 2 |  0.2578 | 0.2627 | 0.2378 | 0.2357 |
| 3 |  0.1702 | 0.3503 | 0.3150 | 0.1544 |
| 4 |  0.1054 | 0.3701 | 0.3289 | 0.0926 |
| 5 |  0.0744 | 0.3556 | 0.3180 | 0.0638 |
| 6 |  0.0635 | 0.3617 | 0.3196 | 0.0542 |
| 7 |  0.0472 | 0.3392 | 0.2955 | 0.0412 |
| 8 |  0.0438 | 0.3509 | 0.3081 | 0.0379 |
| 9 |  0.0280 | 0.2840 | 0.2405 | 0.0224 |
| 10 |  0.0290 | 0.3036 | 0.2565 | 0.0238 |
rrates[2] = listOf(0.2577918, 0.2626600, 0.2377972, 0.2356602, )
rrates[3] = listOf(0.1701664, 0.3503214, 0.3150148, 0.1544314, )
rrates[4] = listOf(0.1053796, 0.3701168, 0.3289396, 0.0925510, )
rrates[5] = listOf(0.0743610, 0.3556458, 0.3179992, 0.0637782, )
rrates[6] = listOf(0.0635118, 0.3617074, 0.3196278, 0.0541958, )
rrates[7] = listOf(0.0472214, 0.3392052, 0.2955398, 0.0412022, )
rrates[8] = listOf(0.0438002, 0.3508940, 0.3080980, 0.0379486, )
rrates[9] = listOf(0.0279836, 0.2840074, 0.2404838, 0.0223554, )
rrates[10] = listOf(0.0289504, 0.3035942, 0.2565026, 0.0238264, )

underVotePct=0.05 N=100000 ntrials = 100
| ncand | r2o    | r1o    | r1u    | r2u    |
|-------|--------|--------|--------|--------|
| 2 |  0.2507 | 0.2675 | 0.2403 | 0.2249 |
| 3 |  0.1525 | 0.3429 | 0.3126 | 0.1348 |
| 4 |  0.0920 | 0.3507 | 0.3138 | 0.0791 |
| 5 |  0.0612 | 0.3306 | 0.2913 | 0.0517 |
| 6 |  0.0435 | 0.3090 | 0.2654 | 0.0358 |
| 7 |  0.0405 | 0.3108 | 0.2700 | 0.0331 |
| 8 |  0.0262 | 0.2641 | 0.2177 | 0.0202 |
| 9 |  0.0294 | 0.2925 | 0.2484 | 0.0238 |
| 10 |  0.0237 | 0.2736 | 0.2299 | 0.0188 |
rrates[2] = listOf(0.2506838, 0.2675062, 0.2403086, 0.2249276, )
rrates[3] = listOf(0.1524990, 0.3429440, 0.3125580, 0.1347592, )
rrates[4] = listOf(0.0920426, 0.3507356, 0.3137728, 0.0791198, )
rrates[5] = listOf(0.0612328, 0.3306490, 0.2913480, 0.0516510, )
rrates[6] = listOf(0.0435140, 0.3089914, 0.2654462, 0.0358172, )
rrates[7] = listOf(0.0404782, 0.3108256, 0.2699954, 0.0330522, )
rrates[8] = listOf(0.0262164, 0.2640696, 0.2177068, 0.0201758, )
rrates[9] = listOf(0.0293728, 0.2925184, 0.2484282, 0.0238024, )
rrates[10] = listOf(0.0237460, 0.2736442, 0.2299424, 0.0187960, )

underVotePct=0.1 N=100000 ntrials = 100
| ncand | r2o    | r1o    | r1u    | r2u    |
|-------|--------|--------|--------|--------|
| 2 |  0.2359 | 0.2707 | 0.2478 | 0.2139 |
| 3 |  0.1430 | 0.3409 | 0.3100 | 0.1265 |
| 4 |  0.0875 | 0.3436 | 0.3106 | 0.0745 |
| 5 |  0.0704 | 0.3464 | 0.3075 | 0.0602 |
| 6 |  0.0649 | 0.3679 | 0.3267 | 0.0558 |
| 7 |  0.0449 | 0.3275 | 0.2821 | 0.0373 |
| 8 |  0.0381 | 0.3176 | 0.2750 | 0.0320 |
| 9 |  0.0328 | 0.3093 | 0.2657 | 0.0266 |
| 10 |  0.0276 | 0.2981 | 0.2528 | 0.0231 |
rrates[2] = listOf(0.2359264, 0.2707460, 0.2477740, 0.2138720, )
rrates[3] = listOf(0.1429928, 0.3408634, 0.3099942, 0.1264776, )
rrates[4] = listOf(0.0874600, 0.3435874, 0.3105544, 0.0744676, )
rrates[5] = listOf(0.0704016, 0.3463668, 0.3075322, 0.0601556, )
rrates[6] = listOf(0.0649212, 0.3678680, 0.3266812, 0.0557714, )
rrates[7] = listOf(0.0449266, 0.3275356, 0.2820878, 0.0372572, )
rrates[8] = listOf(0.0380998, 0.3176034, 0.2750256, 0.0319668, )
rrates[9] = listOf(0.0328378, 0.3093176, 0.2657400, 0.0266292, )
rrates[10] = listOf(0.0275764, 0.2981272, 0.2527920, 0.0231166, )

underVotePct=0.2 N=100000 ntrials = 100
| ncand | r2o    | r1o    | r1u    | r2u    |
|-------|--------|--------|--------|--------|
| 2 |  0.2130 | 0.2803 | 0.2548 | 0.1887 |
| 3 |  0.1290 | 0.3335 | 0.3002 | 0.1152 |
| 4 |  0.0846 | 0.3373 | 0.3015 | 0.0723 |
| 5 |  0.0599 | 0.3241 | 0.2815 | 0.0496 |
| 6 |  0.0487 | 0.3160 | 0.2776 | 0.0403 |
| 7 |  0.0440 | 0.3239 | 0.2806 | 0.0377 |
| 8 |  0.0251 | 0.2547 | 0.2092 | 0.0186 |
| 9 |  0.0268 | 0.2755 | 0.2319 | 0.0207 |
| 10 |  0.0256 | 0.2832 | 0.2390 | 0.0213 |
rrates[2] = listOf(0.2129856, 0.2803394, 0.2547850, 0.1887096, )
rrates[3] = listOf(0.1290116, 0.3335294, 0.3002214, 0.1151582, )
rrates[4] = listOf(0.0846036, 0.3372638, 0.3014788, 0.0722912, )
rrates[5] = listOf(0.0599300, 0.3241438, 0.2815342, 0.0496228, )
rrates[6] = listOf(0.0486542, 0.3159720, 0.2775738, 0.0402892, )
rrates[7] = listOf(0.0440032, 0.3238788, 0.2806420, 0.0377104, )
rrates[8] = listOf(0.0251008, 0.2546742, 0.2091702, 0.0185908, )
rrates[9] = listOf(0.0267876, 0.2755176, 0.2319472, 0.0207152, )
rrates[10] = listOf(0.0256466, 0.2831622, 0.2389912, 0.0213408, )

underVotePct=0.5 N=100000 ntrials = 100
| ncand | r2o    | r1o    | r1u    | r2u    |
|-------|--------|--------|--------|--------|
| 2 |  0.1374 | 0.3036 | 0.2785 | 0.1113 |
| 3 |  0.0780 | 0.3049 | 0.2779 | 0.0629 |
| 4 |  0.0517 | 0.2871 | 0.2505 | 0.0392 |
| 5 |  0.0459 | 0.2844 | 0.2456 | 0.0358 |
| 6 |  0.0238 | 0.2361 | 0.1945 | 0.0154 |
| 7 |  0.0282 | 0.2550 | 0.2130 | 0.0215 |
| 8 |  0.0265 | 0.2556 | 0.2120 | 0.0200 |
| 9 |  0.0184 | 0.2204 | 0.1757 | 0.0124 |
| 10 |  0.0133 | 0.1908 | 0.1479 | 0.0080 |
rrates[2] = listOf(0.1374216, 0.3035634, 0.2784930, 0.1113178, )
rrates[3] = listOf(0.0780024, 0.3049440, 0.2779012, 0.0629444, )
rrates[4] = listOf(0.0516608, 0.2870620, 0.2504594, 0.0391822, )
rrates[5] = listOf(0.0459030, 0.2844374, 0.2456164, 0.0357856, )
rrates[6] = listOf(0.0237736, 0.2361476, 0.1944720, 0.0154000, )
rrates[7] = listOf(0.0282496, 0.2549906, 0.2130370, 0.0215080, )
rrates[8] = listOf(0.0264780, 0.2556400, 0.2120150, 0.0200086, )
rrates[9] = listOf(0.0183782, 0.2203650, 0.1757306, 0.0124496, )
rrates[10] = listOf(0.0132666, 0.1907860, 0.1478728, 0.0080366, )

> Task :plots:test
BUILD SUCCESSFUL in 44m 34s
 */