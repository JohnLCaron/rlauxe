syntax = "proto3";

option java_package = "org.cryptobiotic.protogen";
option java_outer_classname = "RlauxeProto";

// data class AuditConfig(val auditType: AuditType,
//                       val riskLimit: Double,
//                       val seed: Long,
//                       val ntrials: Int = 100,
//                       val quantile: Double = .80,
//                       val p1: Double = 1.0e-2,
//                       val p2: Double = 1.0e-4,
//                       val p3: Double = 1.0e-2,
//                       val p4: Double = 1.0e-4,
//                       val d1: Int = 100,  // for trunc_shrinkage
//                       val d2: Int = 100,
message AuditConfig {
  enum AuditType {
    unknown = 0;
    polling = 1;
    comparison = 2;
    one_audit = 3;
  }

  string spec_version = 1;
  AuditType audit_type = 2;
  double risk_limit = 3;
  bytes seed = 4;
  int32 ntrials = 5;
  double quantile = 6;
  repeated double errorRates = 7;
  repeated double trunc_shrinkae_params = 8;
  map<string, string> contest_max_cards = 10;
}

//     val name: String,
//    val id: Int,
//    val candidateNames: Map<String, Int>, // candidate name -> candidate id
//    val winnerNames: List<String>,
//    val choiceFunction: SocialChoiceFunction,
//    val minFraction: Double? = null, // supermajority only.
message Contest {
  enum SocialChoiceType {
    unknown = 0;
    plurality = 1;
    approval = 2;
    super_majority = 3;
    irv = 4;
  }

  string name = 1;
  int32 id = 2;
  map<string, int32> candidates = 3;
  repeated string winnerNames = 4;
  SocialChoiceType choiceFunction = 5;
  double minFraction = 6; // supermajority only.

  int32 ncvrs = 7;
  int32 upperBound = 8;
  int32 estSampleSize = 9;
  bytes thresholdSampleNumber = 10;
}

// The constants for mathematical functions during the election.
message Cvr {
  string id = 1;
  map<int32, bytes> votes = 2; // more than 255 candidates ? could switch to base 128 encoding
  bool phantom = 3;
  bytes sampleNumber = 4; // randomly assigned
}